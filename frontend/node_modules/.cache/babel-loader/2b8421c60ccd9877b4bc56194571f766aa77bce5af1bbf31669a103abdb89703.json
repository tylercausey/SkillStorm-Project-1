{"ast":null,"code":"var _jsxFileName = \"/home/tylercausey/skillstorm-project-1/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = props => {\n  _s();\n  const {\n    warehouses,\n    items\n  } = props;\n  const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n  const [displayItems, setDisplayItems] = useState([]);\n\n  //filters items bassed on the selectedWarehouseId\n  useEffect(() => {\n    if (selectedWarehouseId) {\n      const updatedItems = items.filter(item => item.warehouse.warehouseId === selectedWarehouseId);\n      setDisplayItems(updatedItems);\n    } else {\n      setDisplayItems([]);\n    }\n  }, [selectedWarehouseId, items]);\n  const renderWarehouses = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"addWarehouseButtonContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addElementOrBackToWarehousesButton\",\n        onClick: addItem,\n        children: \"ADD NEW WAREHOUSE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), warehouses.length ? warehouses.map(warehouse => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warehousesOrInventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"warehouseInfoContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: warehouse.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: warehouse.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"viewInventoryButtonContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"viewInventoryButton\",\n          onClick: () => setSelectedWarehouseId(warehouse.warehouseId),\n          children: \"VIEW INVENTORY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this)]\n    }, warehouse.warehouseId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)) : \"No data available\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n  const renderInventory = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"addItemOrBackToWarehousesButtonContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addElementOrBackToWarehousesButton\",\n        onClick: () => setSelectedWarehouseId(null),\n        children: \"BACK TO WAREHOUSES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addElementOrBackToWarehousesButton\",\n        onClick: addItem,\n        children: \"ADD NEW ITEM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), displayItems.length ? displayItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warehousesOrInventory\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inventoryContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Item Name:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 38\n          }, this), item.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Quantity:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 37\n          }, this), item.quantity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Category:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 37\n          }, this), item.category]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inventoryButtonContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inventoryButtonContainerContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inventoryButtons\",\n              onClick: () => editInventoryItem(item.itemId),\n              children: \"EDIT ITEM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inventoryButtons\",\n              onClick: () => deleteItem(item.itemId),\n              children: \"DELETE ITEM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)\n    }, item.itemId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)) : \"No items found for this warehouse.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n  const addItem = async () => {\n    const name = prompt(\"Enter item name:\");\n    const quantity = prompt(\"Enter item quantity:\");\n    const category = prompt(\"Enter item category:\");\n    if (name && quantity && category && selectedWarehouseId) {\n      try {\n        console.log(selectedWarehouseId);\n        const newItem = {\n          name,\n          quantity: parseInt(quantity, 10),\n          category,\n          warehouse: {\n            warehouseId: selectedWarehouseId\n          }\n        };\n        console.log(newItem);\n        const response = await fetch('http://localhost:8282/api/items', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newItem)\n        });\n        if (response.ok) {\n          const addedItem = await response.json();\n          setDisplayItems([...displayItems, addedItem]);\n        } else {\n          alert(\"Failed to add item. Please try again.\");\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        alert(\"An error occurred. Please try again.\");\n      }\n    } else {\n      alert(\"Please fill in all fields.\");\n    }\n  };\n  const editInventoryItem = async itemId => {\n    const newName = prompt(\"Enter new item name:\", \"\");\n    const newQuantity = prompt(\"Enter new item quantity:\", \"\");\n    const newCategory = prompt(\"Enter new item category:\", \"\");\n    if (newName && newQuantity && newCategory) {\n      try {\n        const updatedItem = {\n          name: newName,\n          quantity: parseInt(newQuantity, 10),\n          category: newCategory,\n          warehouse: {\n            warehouseId: selectedWarehouseId\n          }\n        };\n        const response = await fetch(`http://localhost:8282/api/items/${itemId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedItem)\n        });\n        if (response.ok) {\n          const updatedItemResponse = await response.json();\n          setDisplayItems(displayItems.map(item => item.itemId === itemId ? updatedItemResponse : item));\n        } else {\n          alert(\"Failed to edit item. Please try again.\");\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        alert(\"An error occurred. Please try again.\");\n      }\n    }\n  };\n  const deleteItem = async itemId => {\n    try {\n      const response = await fetch(`http://localhost:8282/api/items/${itemId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setDisplayItems(displayItems.filter(item => item.itemId !== itemId));\n        alert(\"Item successfully deleted.\");\n      } else {\n        alert(\"Failed to delete item. Please try again.\");\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert(\"An error occurred. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"home\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"homeContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"homeHeaderText\",\n        children: \"Warehouse List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"homeContents\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"homeContentsSubheader\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"homeContentsSubheaderTitles\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: selectedWarehouseId == null ? \"underlineMe\" : \"\",\n              children: \"WAREHOUSES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: selectedWarehouseId != null ? \"underlineMe\" : \"\",\n              children: \"INVENTORY\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"search\",\n            id: \"searchBar\",\n            placeholder: \"Search Inventory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"allRows\",\n          children: selectedWarehouseId ? renderInventory() : renderWarehouses()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"sEKmOqJuLYXhJGaNnA6ZUoQZpBg=\");\n_c = Home;\nexport default Home;\n\n// import { useState } from \"react\";\n\n// const Home = (props) => {\n//     const { warehouses, items, setItems } = props;\n//     const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n\n//     const editInventoryItem = async (inventoryId, updates) => {\n//         // Prompt for new values as an example, but in a real application, you might get these from a form\n//         const newValues = {};\n//         if ('quantity' in updates) {\n//             newValues.quantity = prompt('Enter new quantity:');\n//         }\n//         // Add more fields here as necessary, e.g., if you're allowing to change ItemId or WarehouseId\n\n//         if (Object.keys(newValues).length > 0) {\n//             try {\n//                 const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                     method: 'PUT',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify(newValues),\n//                 });\n\n//                 if (response.ok) {\n//                     // After a successful update, refresh the inventory list to reflect the update\n//                     console.log('Inventory item updated successfully');\n//                     // Fetch the updated inventory list or manually update the local state\n//                     // This would require a function to fetch inventory or a more complex state management\n//                 } else {\n//                     console.error('Failed to update inventory item');\n//                 }\n//             } catch (error) {\n//                 console.error('Error:', error);\n//             }\n//         }\n//     };\n\n//     const deleteItem = async (inventoryId) => {\n//         try {\n//             const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                 method: 'DELETE',\n//             });\n//             if (response.ok) {\n//                 const newInventory = inventory.filter(item => item.inventoryId !== inventoryId);\n//                 setInventory(newInventory);\n//                 console.log('Item deleted successfully');\n//             } else {\n//                 console.error('Failed to delete item');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n\n//     // Function to render warehouse list\n//     const renderWarehouses = () => (\n//         <div>\n//             {warehouses.length ? warehouses.map((warehouse) => (            \n//                 <div className=\"warehousesOrInventory\" key={warehouse.id}>\n//                     <div className=\"warehouseInfoContainer\">\n//                         <p>{warehouse.name}</p>\n//                         <p>{warehouse.location}</p>\n//                     </div>\n//                     <div className=\"viewInventoryButtonContainer\">\n//                         <button className=\"viewInventoryButton\" onClick={() => setSelectedWarehouseId(warehouse.id)}>VIEW INVENTORY</button>\n//                     </div>\n//                 </div>\n//             )) : \"No data available\"}\n//         </div>\n//     );\n\n//     // Function to render inventory of the selected warehouse\n//     const renderInventory = () => {\n//         const filteredInventory = inventory.filter(inventoryElement => inventoryElement.warehouseId === selectedWarehouseId);\n//         return (\n//             <div>\n//                 <div id=\"addItemOrBackToWarehousesButtonContainer\">\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                 </div>\n//                 {filteredInventory.length ? filteredInventory.map((inventoryElement) => {\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingItem = items.find(item => item.id === inventoryElement.itemId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const itemName = matchingItem ? matchingItem.name : 'Item name not found';\n\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingCategory = categories.find(category => category.id === matchingItem.categoryId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const categoryName = matchingCategory ? matchingCategory.name : 'Category name not found';\n\n//                     return (\n//                         <div className=\"warehousesOrInventory\" key={inventoryElement.inventoryId}>\n//                             <div className=\"inventoryContainer\">\n//                                 <p>Item #:<br/>{inventoryElement.itemId}</p>\n//                                 <p>Quantity:<br/>{inventoryElement.quantity}</p>\n//                                 <p>Item Name:<br/>{itemName}</p>\n//                                 <p>Category Name:<br/>{categoryName}</p>\n//                             </div>\n//                             <div className=\"inventoryButtonContainer\">\n//                                 <div className=\"inventoryButtonContainerContainer\">\n//                                     <button className=\"inventoryButtons\" onClick={() => editInventoryItem(inventoryElement.inventoryId, inventoryElement.itemId, inventoryElement.warehouseId)}>EDIT QUANTITY</button>\n//                                     <button className=\"inventoryButtons\" onClick={() => deleteItem(inventoryElement.inventoryId)}>DELETE ITEM</button>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     );\n//                 }) : \"No inventory found for this warehouse.\"\n//                 }\n//             </div>\n//         );\n//     };\n\n//     return (\n//         <div id=\"home\">\n//             <div id=\"homeContainer\">\n//                 <h1 id=\"homeHeaderText\">Warehouse List</h1>\n//                 <div id=\"homeContents\">\n//                     <div id=\"homeContentsSubheader\">\n//                         <div id=\"homeContentsSubheaderTitles\">\n//                             <span className={selectedWarehouseId == null ? \"underlineMe\" : \"\"}>WAREHOUSES</span>\n//                             <span className={selectedWarehouseId != null ? \"underlineMe\" : \"\"}>INVENTORY</span>\n//                         </div>\n//                         <input type=\"search\" id=\"searchBar\" placeholder=\"Search Inventory\"></input>\n//                     </div>\n//                     <div id=\"allRows\">\n//                         {selectedWarehouseId ? renderInventory() : renderWarehouses()}\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Home","props","_s","warehouses","items","selectedWarehouseId","setSelectedWarehouseId","displayItems","setDisplayItems","updatedItems","filter","item","warehouse","warehouseId","renderWarehouses","children","id","className","onClick","addItem","fileName","_jsxFileName","lineNumber","columnNumber","length","map","city","address","renderInventory","name","quantity","category","editInventoryItem","itemId","deleteItem","prompt","console","log","newItem","parseInt","response","fetch","method","headers","body","JSON","stringify","ok","addedItem","json","alert","error","newName","newQuantity","newCategory","updatedItem","updatedItemResponse","type","placeholder","_c","$RefreshReg$"],"sources":["/home/tylercausey/skillstorm-project-1/frontend/src/components/Home.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst Home = (props) => {\n    const { warehouses, items } = props;\n    const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n    const [displayItems, setDisplayItems] = useState([]);\n\n    //filters items bassed on the selectedWarehouseId\n    useEffect(() => {\n        if (selectedWarehouseId) {\n            const updatedItems = items.filter((item) => item.warehouse.warehouseId === selectedWarehouseId);\n            setDisplayItems(updatedItems);\n        } else {\n            setDisplayItems([]); \n        }\n    }, [selectedWarehouseId, items]); \n\n    const renderWarehouses = () => (\n        <div>\n            <div id=\"addWarehouseButtonContainer\">\n                <button className=\"addElementOrBackToWarehousesButton\" onClick={addItem}>ADD NEW WAREHOUSE</button>\n            </div>\n            {warehouses.length ? warehouses.map((warehouse) => (\n                <div className=\"warehousesOrInventory\" key={warehouse.warehouseId}>\n                    <div className=\"warehouseInfoContainer\">\n                        <p>{warehouse.city}</p>\n                        <p>{warehouse.address}</p>\n                    </div>\n                    <div className=\"viewInventoryButtonContainer\">\n                        <button className=\"viewInventoryButton\" onClick={() => setSelectedWarehouseId(warehouse.warehouseId)}>VIEW INVENTORY</button>\n                    </div>\n                </div>\n            )) : \"No data available\"}\n        </div>\n    );\n\n    const renderInventory = () => (\n        <div>\n            <div id=\"addItemOrBackToWarehousesButtonContainer\">\n                <button className=\"addElementOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n                <button className=\"addElementOrBackToWarehousesButton\" onClick={addItem}>ADD NEW ITEM</button>\n            </div>\n            {displayItems.length ? displayItems.map((item) => (\n                <div className=\"warehousesOrInventory\" key={item.itemId}>\n                    <div className=\"inventoryContainer\">\n                        <p>Item Name:<br/>{item.name}</p>\n                        <p>Quantity:<br/>{item.quantity}</p>\n                        <p>Category:<br/>{item.category}</p>\n                        <div className=\"inventoryButtonContainer\">\n                            <div className=\"inventoryButtonContainerContainer\">\n                                <button className=\"inventoryButtons\" onClick={() => editInventoryItem(item.itemId)}>EDIT ITEM</button>\n                                <button className=\"inventoryButtons\" onClick={() => deleteItem(item.itemId)}>DELETE ITEM</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )) : \"No items found for this warehouse.\"}\n        </div>\n    );\n    \n\n    const addItem = async () => {\n        const name = prompt(\"Enter item name:\");\n        const quantity = prompt(\"Enter item quantity:\");\n        const category = prompt(\"Enter item category:\");\n        if (name && quantity && category && selectedWarehouseId) {\n            try {\n                console.log(selectedWarehouseId)\n                const newItem = {\n                    name,\n                    quantity: parseInt(quantity, 10), \n                    category,\n                    warehouse: {\n                        warehouseId: selectedWarehouseId \n                    }\n                };\n                console.log(newItem)\n                const response = await fetch('http://localhost:8282/api/items', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(newItem),\n                });\n                if (response.ok) {\n                    const addedItem = await response.json();\n                    setDisplayItems([...displayItems, addedItem]);\n                } else {\n                    alert(\"Failed to add item. Please try again.\");\n                }\n            } catch (error) {\n                console.error('Error:', error);\n                alert(\"An error occurred. Please try again.\");\n            }\n        } else {\n            alert(\"Please fill in all fields.\");\n        }\n    };\n\n    const editInventoryItem = async (itemId) => {\n        const newName = prompt(\"Enter new item name:\", \"\");\n        const newQuantity = prompt(\"Enter new item quantity:\", \"\");\n        const newCategory = prompt(\"Enter new item category:\", \"\");\n        if (newName && newQuantity && newCategory) {\n            try {\n                const updatedItem = {\n                    name: newName,\n                    quantity: parseInt(newQuantity, 10),\n                    category: newCategory,\n                    warehouse: {\n                        warehouseId: selectedWarehouseId\n                    }\n                };\n                const response = await fetch(`http://localhost:8282/api/items/${itemId}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(updatedItem),\n                });\n                if (response.ok) {\n                    const updatedItemResponse = await response.json();\n                    setDisplayItems(displayItems.map(item => item.itemId === itemId ? updatedItemResponse : item));\n                } else {\n                    alert(\"Failed to edit item. Please try again.\");\n                }\n            } catch (error) {\n                console.error('Error:', error);\n                alert(\"An error occurred. Please try again.\");\n            }\n        }\n    };\n    \n    const deleteItem = async (itemId) => {\n        try {\n            const response = await fetch(`http://localhost:8282/api/items/${itemId}`, {\n                method: 'DELETE',\n            });\n            if (response.ok) {\n                setDisplayItems(displayItems.filter(item => item.itemId !== itemId));\n                alert(\"Item successfully deleted.\");\n            } else {\n                alert(\"Failed to delete item. Please try again.\");\n            }\n        } catch (error) {\n            console.error('Error:', error);\n            alert(\"An error occurred. Please try again.\");\n        }\n    };\n    \n\n    return (\n        <div id=\"home\">\n            <div id=\"homeContainer\">\n                <h1 id=\"homeHeaderText\">Warehouse List</h1>\n                <div id=\"homeContents\">\n                    <div id=\"homeContentsSubheader\">\n                        <div id=\"homeContentsSubheaderTitles\">\n                            <span className={selectedWarehouseId == null ? \"underlineMe\" : \"\"}>WAREHOUSES</span>\n                            <span className={selectedWarehouseId != null ? \"underlineMe\" : \"\"}>INVENTORY</span>\n                        </div>\n                        <input type=\"search\" id=\"searchBar\" placeholder=\"Search Inventory\"></input>\n                    </div>\n                    <div id=\"allRows\">\n                        {selectedWarehouseId ? renderInventory() : renderWarehouses()}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n\n\n\n\n\n\n\n\n\n\n\n\n// import { useState } from \"react\";\n\n// const Home = (props) => {\n//     const { warehouses, items, setItems } = props;\n//     const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n\n//     const editInventoryItem = async (inventoryId, updates) => {\n//         // Prompt for new values as an example, but in a real application, you might get these from a form\n//         const newValues = {};\n//         if ('quantity' in updates) {\n//             newValues.quantity = prompt('Enter new quantity:');\n//         }\n//         // Add more fields here as necessary, e.g., if you're allowing to change ItemId or WarehouseId\n    \n//         if (Object.keys(newValues).length > 0) {\n//             try {\n//                 const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                     method: 'PUT',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify(newValues),\n//                 });\n    \n//                 if (response.ok) {\n//                     // After a successful update, refresh the inventory list to reflect the update\n//                     console.log('Inventory item updated successfully');\n//                     // Fetch the updated inventory list or manually update the local state\n//                     // This would require a function to fetch inventory or a more complex state management\n//                 } else {\n//                     console.error('Failed to update inventory item');\n//                 }\n//             } catch (error) {\n//                 console.error('Error:', error);\n//             }\n//         }\n//     };\n    \n\n//     const deleteItem = async (inventoryId) => {\n//         try {\n//             const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                 method: 'DELETE',\n//             });\n//             if (response.ok) {\n//                 const newInventory = inventory.filter(item => item.inventoryId !== inventoryId);\n//                 setInventory(newInventory);\n//                 console.log('Item deleted successfully');\n//             } else {\n//                 console.error('Failed to delete item');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n    \n\n//     // Function to render warehouse list\n//     const renderWarehouses = () => (\n//         <div>\n//             {warehouses.length ? warehouses.map((warehouse) => (            \n//                 <div className=\"warehousesOrInventory\" key={warehouse.id}>\n//                     <div className=\"warehouseInfoContainer\">\n//                         <p>{warehouse.name}</p>\n//                         <p>{warehouse.location}</p>\n//                     </div>\n//                     <div className=\"viewInventoryButtonContainer\">\n//                         <button className=\"viewInventoryButton\" onClick={() => setSelectedWarehouseId(warehouse.id)}>VIEW INVENTORY</button>\n//                     </div>\n//                 </div>\n//             )) : \"No data available\"}\n//         </div>\n//     );\n\n//     // Function to render inventory of the selected warehouse\n//     const renderInventory = () => {\n//         const filteredInventory = inventory.filter(inventoryElement => inventoryElement.warehouseId === selectedWarehouseId);\n//         return (\n//             <div>\n//                 <div id=\"addItemOrBackToWarehousesButtonContainer\">\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                 </div>\n//                 {filteredInventory.length ? filteredInventory.map((inventoryElement) => {\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingItem = items.find(item => item.id === inventoryElement.itemId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const itemName = matchingItem ? matchingItem.name : 'Item name not found';\n\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingCategory = categories.find(category => category.id === matchingItem.categoryId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const categoryName = matchingCategory ? matchingCategory.name : 'Category name not found';\n    \n//                     return (\n//                         <div className=\"warehousesOrInventory\" key={inventoryElement.inventoryId}>\n//                             <div className=\"inventoryContainer\">\n//                                 <p>Item #:<br/>{inventoryElement.itemId}</p>\n//                                 <p>Quantity:<br/>{inventoryElement.quantity}</p>\n//                                 <p>Item Name:<br/>{itemName}</p>\n//                                 <p>Category Name:<br/>{categoryName}</p>\n//                             </div>\n//                             <div className=\"inventoryButtonContainer\">\n//                                 <div className=\"inventoryButtonContainerContainer\">\n//                                     <button className=\"inventoryButtons\" onClick={() => editInventoryItem(inventoryElement.inventoryId, inventoryElement.itemId, inventoryElement.warehouseId)}>EDIT QUANTITY</button>\n//                                     <button className=\"inventoryButtons\" onClick={() => deleteItem(inventoryElement.inventoryId)}>DELETE ITEM</button>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     );\n//                 }) : \"No inventory found for this warehouse.\"\n//                 }\n//             </div>\n//         );\n//     };\n    \n//     return (\n//         <div id=\"home\">\n//             <div id=\"homeContainer\">\n//                 <h1 id=\"homeHeaderText\">Warehouse List</h1>\n//                 <div id=\"homeContents\">\n//                     <div id=\"homeContentsSubheader\">\n//                         <div id=\"homeContentsSubheaderTitles\">\n//                             <span className={selectedWarehouseId == null ? \"underlineMe\" : \"\"}>WAREHOUSES</span>\n//                             <span className={selectedWarehouseId != null ? \"underlineMe\" : \"\"}>INVENTORY</span>\n//                         </div>\n//                         <input type=\"search\" id=\"searchBar\" placeholder=\"Search Inventory\"></input>\n//                     </div>\n//                     <div id=\"allRows\">\n//                         {selectedWarehouseId ? renderInventory() : renderWarehouses()}\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Home;"],"mappings":"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;UAAKiB,EAAE,EAAC,SAAS;UAAAD,QAAA,EACZV,mBAAmB,GAAGuB,eAAe,CAAC,CAAC,GAAGd,gBAAgB,CAAC;QAAC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACrB,EAAA,CAxKIF,IAAI;AAAA2D,EAAA,GAAJ3D,IAAI;AA0KV,eAAeA,IAAI;;AAanB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}