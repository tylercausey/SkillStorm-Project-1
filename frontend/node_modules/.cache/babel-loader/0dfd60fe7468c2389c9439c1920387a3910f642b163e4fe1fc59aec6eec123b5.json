{"ast":null,"code":"var _jsxFileName = \"/home/tylercausey/skillstorm-project-1/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = props => {\n  _s();\n  const {\n    warehouses,\n    items,\n    setItems\n  } = props;\n  const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n  const fetchItemsByWarehouseId = async warehouseId => {\n    try {\n      const response = await fetch(`http://localhost:8282/api/items/warehouse/${warehouseId}`);\n      if (response.ok) {\n        const fetchedItems = await response.json();\n        setItems(fetchedItems);\n      } else {\n        console.error('Failed to fetch items');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  useEffect(() => {\n    if (selectedWarehouseId) {\n      fetchItemsByWarehouseId(selectedWarehouseId);\n    }\n  }, [selectedWarehouseId]);\n  const renderWarehouses = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: warehouses.length ? warehouses.map(warehouse => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warehousesOrInventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"warehouseInfoContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: warehouse.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: warehouse.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"viewInventoryButtonContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"viewInventoryButton\",\n          onClick: () => setSelectedWarehouseId(warehouse.warehouseId),\n          children: \"VIEW INVENTORY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this)]\n    }, warehouse.warehouseId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)) : \"No data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n  const renderInventory = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"addItemOrBackToWarehousesButtonContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addItemOrBackToWarehousesButton\",\n        onClick: () => setSelectedWarehouseId(null),\n        children: \"ADD NEW ITEM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addItemOrBackToWarehousesButton\",\n        onClick: () => setSelectedWarehouseId(null),\n        children: \"BACK TO WAREHOUSES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), items.length ? items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warehousesOrInventory\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inventoryContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Item Name:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 38\n          }, this), item.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Quantity:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 37\n          }, this), item.quantity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Category:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 37\n          }, this), item.category]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)\n    }, item.itemId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)) : \"No items found for this warehouse.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"home\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"homeContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"homeHeaderText\",\n        children: \"Warehouse List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"homeContents\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"homeContentsSubheader\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"homeContentsSubheaderTitles\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: selectedWarehouseId == null ? \"underlineMe\" : \"\",\n              children: \"WAREHOUSES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: selectedWarehouseId != null ? \"underlineMe\" : \"\",\n              children: \"INVENTORY\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"search\",\n            id: \"searchBar\",\n            placeholder: \"Search Inventory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"allRows\",\n          children: selectedWarehouseId ? renderInventory() : renderWarehouses()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"2Fa0t0HN99hC/JrKOsejKYiqlts=\");\n_c = Home;\nexport default Home;\n\n// import { useState } from \"react\";\n\n// const Home = (props) => {\n//     const { warehouses, items, setItems } = props;\n//     const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n\n//     const editInventoryItem = async (inventoryId, updates) => {\n//         // Prompt for new values as an example, but in a real application, you might get these from a form\n//         const newValues = {};\n//         if ('quantity' in updates) {\n//             newValues.quantity = prompt('Enter new quantity:');\n//         }\n//         // Add more fields here as necessary, e.g., if you're allowing to change ItemId or WarehouseId\n\n//         if (Object.keys(newValues).length > 0) {\n//             try {\n//                 const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                     method: 'PUT',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify(newValues),\n//                 });\n\n//                 if (response.ok) {\n//                     // After a successful update, refresh the inventory list to reflect the update\n//                     console.log('Inventory item updated successfully');\n//                     // Fetch the updated inventory list or manually update the local state\n//                     // This would require a function to fetch inventory or a more complex state management\n//                 } else {\n//                     console.error('Failed to update inventory item');\n//                 }\n//             } catch (error) {\n//                 console.error('Error:', error);\n//             }\n//         }\n//     };\n\n//     const deleteItem = async (inventoryId) => {\n//         try {\n//             const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                 method: 'DELETE',\n//             });\n//             if (response.ok) {\n//                 const newInventory = inventory.filter(item => item.inventoryId !== inventoryId);\n//                 setInventory(newInventory);\n//                 console.log('Item deleted successfully');\n//             } else {\n//                 console.error('Failed to delete item');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n\n//     // Function to render warehouse list\n//     const renderWarehouses = () => (\n//         <div>\n//             {warehouses.length ? warehouses.map((warehouse) => (            \n//                 <div className=\"warehousesOrInventory\" key={warehouse.id}>\n//                     <div className=\"warehouseInfoContainer\">\n//                         <p>{warehouse.name}</p>\n//                         <p>{warehouse.location}</p>\n//                     </div>\n//                     <div className=\"viewInventoryButtonContainer\">\n//                         <button className=\"viewInventoryButton\" onClick={() => setSelectedWarehouseId(warehouse.id)}>VIEW INVENTORY</button>\n//                     </div>\n//                 </div>\n//             )) : \"No data available\"}\n//         </div>\n//     );\n\n//     // Function to render inventory of the selected warehouse\n//     const renderInventory = () => {\n//         const filteredInventory = inventory.filter(inventoryElement => inventoryElement.warehouseId === selectedWarehouseId);\n//         return (\n//             <div>\n//                 <div id=\"addItemOrBackToWarehousesButtonContainer\">\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                 </div>\n//                 {filteredInventory.length ? filteredInventory.map((inventoryElement) => {\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingItem = items.find(item => item.id === inventoryElement.itemId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const itemName = matchingItem ? matchingItem.name : 'Item name not found';\n\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingCategory = categories.find(category => category.id === matchingItem.categoryId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const categoryName = matchingCategory ? matchingCategory.name : 'Category name not found';\n\n//                     return (\n//                         <div className=\"warehousesOrInventory\" key={inventoryElement.inventoryId}>\n//                             <div className=\"inventoryContainer\">\n//                                 <p>Item #:<br/>{inventoryElement.itemId}</p>\n//                                 <p>Quantity:<br/>{inventoryElement.quantity}</p>\n//                                 <p>Item Name:<br/>{itemName}</p>\n//                                 <p>Category Name:<br/>{categoryName}</p>\n//                             </div>\n//                             <div className=\"inventoryButtonContainer\">\n//                                 <div className=\"inventoryButtonContainerContainer\">\n//                                     <button className=\"inventoryButtons\" onClick={() => editInventoryItem(inventoryElement.inventoryId, inventoryElement.itemId, inventoryElement.warehouseId)}>EDIT QUANTITY</button>\n//                                     <button className=\"inventoryButtons\" onClick={() => deleteItem(inventoryElement.inventoryId)}>DELETE ITEM</button>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     );\n//                 }) : \"No inventory found for this warehouse.\"\n//                 }\n//             </div>\n//         );\n//     };\n\n//     return (\n//         <div id=\"home\">\n//             <div id=\"homeContainer\">\n//                 <h1 id=\"homeHeaderText\">Warehouse List</h1>\n//                 <div id=\"homeContents\">\n//                     <div id=\"homeContentsSubheader\">\n//                         <div id=\"homeContentsSubheaderTitles\">\n//                             <span className={selectedWarehouseId == null ? \"underlineMe\" : \"\"}>WAREHOUSES</span>\n//                             <span className={selectedWarehouseId != null ? \"underlineMe\" : \"\"}>INVENTORY</span>\n//                         </div>\n//                         <input type=\"search\" id=\"searchBar\" placeholder=\"Search Inventory\"></input>\n//                     </div>\n//                     <div id=\"allRows\">\n//                         {selectedWarehouseId ? renderInventory() : renderWarehouses()}\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Home","props","_s","warehouses","items","setItems","selectedWarehouseId","setSelectedWarehouseId","fetchItemsByWarehouseId","warehouseId","response","fetch","ok","fetchedItems","json","console","error","renderWarehouses","children","length","map","warehouse","className","city","fileName","_jsxFileName","lineNumber","columnNumber","address","onClick","renderInventory","id","item","name","quantity","category","itemId","type","placeholder","_c","$RefreshReg$"],"sources":["/home/tylercausey/skillstorm-project-1/frontend/src/components/Home.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst Home = (props) => {\n    const { warehouses, items, setItems } = props;\n    const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n\n    const fetchItemsByWarehouseId = async (warehouseId) => {\n        try {\n            const response = await fetch(`http://localhost:8282/api/items/warehouse/${warehouseId}`);\n            if (response.ok) {\n                const fetchedItems = await response.json();\n                setItems(fetchedItems);\n            } else {\n                console.error('Failed to fetch items');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    useEffect(() => {\n        if (selectedWarehouseId) {\n            fetchItemsByWarehouseId(selectedWarehouseId);\n        }\n    }, [selectedWarehouseId]);\n\n    const renderWarehouses = () => (\n        <div>\n            {warehouses.length ? warehouses.map((warehouse) => (\n                <div className=\"warehousesOrInventory\" key={warehouse.warehouseId}>\n                    <div className=\"warehouseInfoContainer\">\n                        <p>{warehouse.city}</p>\n                        <p>{warehouse.address}</p>\n                    </div>\n                    <div className=\"viewInventoryButtonContainer\">\n                        <button className=\"viewInventoryButton\" onClick={() => setSelectedWarehouseId(warehouse.warehouseId)}>VIEW INVENTORY</button>\n                    </div>\n                </div>\n            )) : \"No data available\"}\n        </div>\n    );\n\n    const renderInventory = () => (\n        <div>\n            <div id=\"addItemOrBackToWarehousesButtonContainer\">\n                <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>ADD NEW ITEM</button>\n                <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n            </div>\n            {items.length ? items.map((item) => (\n                <div className=\"warehousesOrInventory\" key={item.itemId}>\n                    <div className=\"inventoryContainer\">\n                        <p>Item Name:<br/>{item.name}</p>\n                        <p>Quantity:<br/>{item.quantity}</p>\n                        <p>Category:<br/>{item.category}</p>\n                    </div>\n                </div>\n            )) : \"No items found for this warehouse.\"}\n        </div>\n    );\n\n    return (\n        <div id=\"home\">\n            <div id=\"homeContainer\">\n                <h1 id=\"homeHeaderText\">Warehouse List</h1>\n                <div id=\"homeContents\">\n                    <div id=\"homeContentsSubheader\">\n                        <div id=\"homeContentsSubheaderTitles\">\n                            <span className={selectedWarehouseId == null ? \"underlineMe\" : \"\"}>WAREHOUSES</span>\n                            <span className={selectedWarehouseId != null ? \"underlineMe\" : \"\"}>INVENTORY</span>\n                        </div>\n                        <input type=\"search\" id=\"searchBar\" placeholder=\"Search Inventory\"></input>\n                    </div>\n                    <div id=\"allRows\">\n                        {selectedWarehouseId ? renderInventory() : renderWarehouses()}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n\n\n\n\n\n\n\n\n\n\n\n// import { useState } from \"react\";\n\n// const Home = (props) => {\n//     const { warehouses, items, setItems } = props;\n//     const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n\n//     const editInventoryItem = async (inventoryId, updates) => {\n//         // Prompt for new values as an example, but in a real application, you might get these from a form\n//         const newValues = {};\n//         if ('quantity' in updates) {\n//             newValues.quantity = prompt('Enter new quantity:');\n//         }\n//         // Add more fields here as necessary, e.g., if you're allowing to change ItemId or WarehouseId\n    \n//         if (Object.keys(newValues).length > 0) {\n//             try {\n//                 const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                     method: 'PUT',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify(newValues),\n//                 });\n    \n//                 if (response.ok) {\n//                     // After a successful update, refresh the inventory list to reflect the update\n//                     console.log('Inventory item updated successfully');\n//                     // Fetch the updated inventory list or manually update the local state\n//                     // This would require a function to fetch inventory or a more complex state management\n//                 } else {\n//                     console.error('Failed to update inventory item');\n//                 }\n//             } catch (error) {\n//                 console.error('Error:', error);\n//             }\n//         }\n//     };\n    \n\n//     const deleteItem = async (inventoryId) => {\n//         try {\n//             const response = await fetch(`http://localhost:8282/api/inventory/${inventoryId}`, {\n//                 method: 'DELETE',\n//             });\n//             if (response.ok) {\n//                 const newInventory = inventory.filter(item => item.inventoryId !== inventoryId);\n//                 setInventory(newInventory);\n//                 console.log('Item deleted successfully');\n//             } else {\n//                 console.error('Failed to delete item');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n    \n\n//     // Function to render warehouse list\n//     const renderWarehouses = () => (\n//         <div>\n//             {warehouses.length ? warehouses.map((warehouse) => (            \n//                 <div className=\"warehousesOrInventory\" key={warehouse.id}>\n//                     <div className=\"warehouseInfoContainer\">\n//                         <p>{warehouse.name}</p>\n//                         <p>{warehouse.location}</p>\n//                     </div>\n//                     <div className=\"viewInventoryButtonContainer\">\n//                         <button className=\"viewInventoryButton\" onClick={() => setSelectedWarehouseId(warehouse.id)}>VIEW INVENTORY</button>\n//                     </div>\n//                 </div>\n//             )) : \"No data available\"}\n//         </div>\n//     );\n\n//     // Function to render inventory of the selected warehouse\n//     const renderInventory = () => {\n//         const filteredInventory = inventory.filter(inventoryElement => inventoryElement.warehouseId === selectedWarehouseId);\n//         return (\n//             <div>\n//                 <div id=\"addItemOrBackToWarehousesButtonContainer\">\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                     <button className=\"addItemOrBackToWarehousesButton\" onClick={() => setSelectedWarehouseId(null)}>BACK TO WAREHOUSES</button>\n//                 </div>\n//                 {filteredInventory.length ? filteredInventory.map((inventoryElement) => {\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingItem = items.find(item => item.id === inventoryElement.itemId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const itemName = matchingItem ? matchingItem.name : 'Item name not found';\n\n//                     // Find the item in the items array that matches the current inventory element's itemId\n//                     const matchingCategory = categories.find(category => category.id === matchingItem.categoryId);\n//                     // If a matching item is found, use its name, otherwise indicate that the item is not found\n//                     const categoryName = matchingCategory ? matchingCategory.name : 'Category name not found';\n    \n//                     return (\n//                         <div className=\"warehousesOrInventory\" key={inventoryElement.inventoryId}>\n//                             <div className=\"inventoryContainer\">\n//                                 <p>Item #:<br/>{inventoryElement.itemId}</p>\n//                                 <p>Quantity:<br/>{inventoryElement.quantity}</p>\n//                                 <p>Item Name:<br/>{itemName}</p>\n//                                 <p>Category Name:<br/>{categoryName}</p>\n//                             </div>\n//                             <div className=\"inventoryButtonContainer\">\n//                                 <div className=\"inventoryButtonContainerContainer\">\n//                                     <button className=\"inventoryButtons\" onClick={() => editInventoryItem(inventoryElement.inventoryId, inventoryElement.itemId, inventoryElement.warehouseId)}>EDIT QUANTITY</button>\n//                                     <button className=\"inventoryButtons\" onClick={() => deleteItem(inventoryElement.inventoryId)}>DELETE ITEM</button>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     );\n//                 }) : \"No inventory found for this warehouse.\"\n//                 }\n//             </div>\n//         );\n//     };\n    \n//     return (\n//         <div id=\"home\">\n//             <div id=\"homeContainer\">\n//                 <h1 id=\"homeHeaderText\">Warehouse List</h1>\n//                 <div id=\"homeContents\">\n//                     <div id=\"homeContentsSubheader\">\n//                         <div id=\"homeContentsSubheaderTitles\">\n//                             <span className={selectedWarehouseId == null ? \"underlineMe\" : \"\"}>WAREHOUSES</span>\n//                             <span className={selectedWarehouseId != null ? \"underlineMe\" : \"\"}>INVENTORY</span>\n//                         </div>\n//                         <input type=\"search\" id=\"searchBar\" placeholder=\"Search Inventory\"></input>\n//                     </div>\n//                     <div id=\"allRows\">\n//                         {selectedWarehouseId ? renderInventory() : renderWarehouses()}\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}